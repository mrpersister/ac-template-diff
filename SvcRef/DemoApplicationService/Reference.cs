//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoAccessControlPlugin.DemoApplicationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDescriptor", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class UserDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastChanged {
            get {
                return this.LastChangedField;
            }
            set {
                if ((this.LastChangedField.Equals(value) != true)) {
                    this.LastChangedField = value;
                    this.RaisePropertyChanged("LastChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDescriptor", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class EventDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName {
            get {
                return this.EventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNameField, value) != true)) {
                    this.EventNameField = value;
                    this.RaisePropertyChanged("EventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceType {
            get {
                return this.SourceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceTypeField, value) != true)) {
                    this.SourceTypeField = value;
                    this.RaisePropertyChanged("SourceType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorControllerDescriptor", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class DoorControllerDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DoorControllerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoorControllerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DoorControllerId {
            get {
                return this.DoorControllerIdField;
            }
            set {
                if ((this.DoorControllerIdField.Equals(value) != true)) {
                    this.DoorControllerIdField = value;
                    this.RaisePropertyChanged("DoorControllerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoorControllerName {
            get {
                return this.DoorControllerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DoorControllerNameField, value) != true)) {
                    this.DoorControllerNameField = value;
                    this.RaisePropertyChanged("DoorControllerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorDescriptor", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class DoorDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DoorControllerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DoorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasRexButtonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockCommandSupportedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UnlockCommandSupportedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DoorControllerId {
            get {
                return this.DoorControllerIdField;
            }
            set {
                if ((this.DoorControllerIdField.Equals(value) != true)) {
                    this.DoorControllerIdField = value;
                    this.RaisePropertyChanged("DoorControllerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DoorId {
            get {
                return this.DoorIdField;
            }
            set {
                if ((this.DoorIdField.Equals(value) != true)) {
                    this.DoorIdField = value;
                    this.RaisePropertyChanged("DoorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoorName {
            get {
                return this.DoorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DoorNameField, value) != true)) {
                    this.DoorNameField = value;
                    this.RaisePropertyChanged("DoorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasRexButton {
            get {
                return this.HasRexButtonField;
            }
            set {
                if ((this.HasRexButtonField.Equals(value) != true)) {
                    this.HasRexButtonField = value;
                    this.RaisePropertyChanged("HasRexButton");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockCommandSupported {
            get {
                return this.LockCommandSupportedField;
            }
            set {
                if ((this.LockCommandSupportedField.Equals(value) != true)) {
                    this.LockCommandSupportedField = value;
                    this.RaisePropertyChanged("LockCommandSupported");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UnlockCommandSupported {
            get {
                return this.UnlockCommandSupportedField;
            }
            set {
                if ((this.UnlockCommandSupportedField.Equals(value) != true)) {
                    this.UnlockCommandSupportedField = value;
                    this.RaisePropertyChanged("UnlockCommandSupported");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CredentialHolderDescriptor", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class CredentialHolderDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CredentialHolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CredentialHolderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RolesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardId {
            get {
                return this.CardIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CardIdField, value) != true)) {
                    this.CardIdField = value;
                    this.RaisePropertyChanged("CardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CredentialHolderId {
            get {
                return this.CredentialHolderIdField;
            }
            set {
                if ((this.CredentialHolderIdField.Equals(value) != true)) {
                    this.CredentialHolderIdField = value;
                    this.RaisePropertyChanged("CredentialHolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CredentialHolderName {
            get {
                return this.CredentialHolderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CredentialHolderNameField, value) != true)) {
                    this.CredentialHolderNameField = value;
                    this.RaisePropertyChanged("CredentialHolderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpiryDate {
            get {
                return this.ExpiryDateField;
            }
            set {
                if ((this.ExpiryDateField.Equals(value) != true)) {
                    this.ExpiryDateField = value;
                    this.RaisePropertyChanged("ExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Roles {
            get {
                return this.RolesField;
            }
            set {
                if ((object.ReferenceEquals(this.RolesField, value) != true)) {
                    this.RolesField = value;
                    this.RaisePropertyChanged("Roles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEvent", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DemoApplicationService.DoorStatusEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DemoApplicationService.EventTypeEnabledStatusEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DemoApplicationService.DoorControllerEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DemoApplicationService.DoorEnabledStatusEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DemoApplicationService.CredentialHolderChangedEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DemoApplicationService.UserChangedEvent))]
    public partial class BaseEvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SequenceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SequenceNumber {
            get {
                return this.SequenceNumberField;
            }
            set {
                if ((this.SequenceNumberField.Equals(value) != true)) {
                    this.SequenceNumberField = value;
                    this.RaisePropertyChanged("SequenceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorStatusEvent", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class DoorStatusEvent : DemoApplicationService.BaseEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DemoApplicationService.DoorStatus StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DemoApplicationService.DoorStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventTypeEnabledStatusEvent", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class EventTypeEnabledStatusEvent : DemoApplicationService.BaseEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EventTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventTypeId {
            get {
                return this.EventTypeIdField;
            }
            set {
                if ((this.EventTypeIdField.Equals(value) != true)) {
                    this.EventTypeIdField = value;
                    this.RaisePropertyChanged("EventTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorControllerEvent", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class DoorControllerEvent : DemoApplicationService.BaseEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CredentialHolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DoorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VmsUserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessPoint {
            get {
                return this.AccessPointField;
            }
            set {
                if ((this.AccessPointField.Equals(value) != true)) {
                    this.AccessPointField = value;
                    this.RaisePropertyChanged("AccessPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CredentialHolderId {
            get {
                return this.CredentialHolderIdField;
            }
            set {
                if ((this.CredentialHolderIdField.Equals(value) != true)) {
                    this.CredentialHolderIdField = value;
                    this.RaisePropertyChanged("CredentialHolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DoorId {
            get {
                return this.DoorIdField;
            }
            set {
                if ((this.DoorIdField.Equals(value) != true)) {
                    this.DoorIdField = value;
                    this.RaisePropertyChanged("DoorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VmsUserName {
            get {
                return this.VmsUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VmsUserNameField, value) != true)) {
                    this.VmsUserNameField = value;
                    this.RaisePropertyChanged("VmsUserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorEnabledStatusEvent", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class DoorEnabledStatusEvent : DemoApplicationService.BaseEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DoorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DoorId {
            get {
                return this.DoorIdField;
            }
            set {
                if ((this.DoorIdField.Equals(value) != true)) {
                    this.DoorIdField = value;
                    this.RaisePropertyChanged("DoorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CredentialHolderChangedEvent", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class CredentialHolderChangedEvent : DemoApplicationService.BaseEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CredentialHolderIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CredentialHolderId {
            get {
                return this.CredentialHolderIdField;
            }
            set {
                if ((this.CredentialHolderIdField.Equals(value) != true)) {
                    this.CredentialHolderIdField = value;
                    this.RaisePropertyChanged("CredentialHolderId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserChangedEvent", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class UserChangedEvent : DemoApplicationService.BaseEvent {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastChanged {
            get {
                return this.LastChangedField;
            }
            set {
                if ((this.LastChangedField.Equals(value) != true)) {
                    this.LastChangedField = value;
                    this.RaisePropertyChanged("LastChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorStatus", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class DoorStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DoorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOpenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DoorId {
            get {
                return this.DoorIdField;
            }
            set {
                if ((this.DoorIdField.Equals(value) != true)) {
                    this.DoorIdField = value;
                    this.RaisePropertyChanged("DoorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOpen {
            get {
                return this.IsOpenField;
            }
            set {
                if ((this.IsOpenField.Equals(value) != true)) {
                    this.IsOpenField = value;
                    this.RaisePropertyChanged("IsOpen");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClearAlarmCommand", Namespace="http://schemas.datacontract.org/2004/07/DemoACServerApplication")]
    [System.SerializableAttribute()]
    public partial class ClearAlarmCommand : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DoorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EventTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DoorId {
            get {
                return this.DoorIdField;
            }
            set {
                if ((this.DoorIdField.Equals(value) != true)) {
                    this.DoorIdField = value;
                    this.RaisePropertyChanged("DoorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventTypeId {
            get {
                return this.EventTypeIdField;
            }
            set {
                if ((this.EventTypeIdField.Equals(value) != true)) {
                    this.EventTypeIdField = value;
                    this.RaisePropertyChanged("EventTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DemoApplicationService.IWebService")]
    public interface IWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/Connect", ReplyAction="http://tempuri.org/IWebService/ConnectResponse")]
        DemoApplicationService.UserDescriptor Connect(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/Connect", ReplyAction="http://tempuri.org/IWebService/ConnectResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.UserDescriptor> ConnectAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetUser", ReplyAction="http://tempuri.org/IWebService/GetUserResponse")]
        DemoApplicationService.UserDescriptor GetUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetUser", ReplyAction="http://tempuri.org/IWebService/GetUserResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.UserDescriptor> GetUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetEventTypes", ReplyAction="http://tempuri.org/IWebService/GetEventTypesResponse")]
        DemoApplicationService.EventDescriptor[] GetEventTypes(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetEventTypes", ReplyAction="http://tempuri.org/IWebService/GetEventTypesResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.EventDescriptor[]> GetEventTypesAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetDoorControllers", ReplyAction="http://tempuri.org/IWebService/GetDoorControllersResponse")]
        DemoApplicationService.DoorControllerDescriptor[] GetDoorControllers(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetDoorControllers", ReplyAction="http://tempuri.org/IWebService/GetDoorControllersResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.DoorControllerDescriptor[]> GetDoorControllersAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetDoors", ReplyAction="http://tempuri.org/IWebService/GetDoorsResponse")]
        DemoApplicationService.DoorDescriptor[] GetDoors(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetDoors", ReplyAction="http://tempuri.org/IWebService/GetDoorsResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.DoorDescriptor[]> GetDoorsAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetCredentialHolder", ReplyAction="http://tempuri.org/IWebService/GetCredentialHolderResponse")]
        DemoApplicationService.CredentialHolderDescriptor GetCredentialHolder(System.Guid credentialHolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetCredentialHolder", ReplyAction="http://tempuri.org/IWebService/GetCredentialHolderResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.CredentialHolderDescriptor> GetCredentialHolderAsync(System.Guid credentialHolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/SearchCredentialHolders", ReplyAction="http://tempuri.org/IWebService/SearchCredentialHoldersResponse")]
        DemoApplicationService.CredentialHolderDescriptor[] SearchCredentialHolders(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/SearchCredentialHolders", ReplyAction="http://tempuri.org/IWebService/SearchCredentialHoldersResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.CredentialHolderDescriptor[]> SearchCredentialHoldersAsync(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetEvents", ReplyAction="http://tempuri.org/IWebService/GetEventsResponse")]
        DemoApplicationService.BaseEvent[] GetEvents(string userName, string password, int timeoutMilliSecs, long startSequenceNumber, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetEvents", ReplyAction="http://tempuri.org/IWebService/GetEventsResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.BaseEvent[]> GetEventsAsync(string userName, string password, int timeoutMilliSecs, long startSequenceNumber, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/UnlockDoor", ReplyAction="http://tempuri.org/IWebService/UnlockDoorResponse")]
        bool UnlockDoor(string userName, string password, string vmsUserName, System.Guid doorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/UnlockDoor", ReplyAction="http://tempuri.org/IWebService/UnlockDoorResponse")]
        System.Threading.Tasks.Task<bool> UnlockDoorAsync(string userName, string password, string vmsUserName, System.Guid doorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/LockDoor", ReplyAction="http://tempuri.org/IWebService/LockDoorResponse")]
        bool LockDoor(string userName, string password, string vmsUserName, System.Guid doorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/LockDoor", ReplyAction="http://tempuri.org/IWebService/LockDoorResponse")]
        System.Threading.Tasks.Task<bool> LockDoorAsync(string userName, string password, string vmsUserName, System.Guid doorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetDoorStatus", ReplyAction="http://tempuri.org/IWebService/GetDoorStatusResponse")]
        DemoApplicationService.DoorStatus GetDoorStatus(string userName, string password, System.Guid doorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetDoorStatus", ReplyAction="http://tempuri.org/IWebService/GetDoorStatusResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.DoorStatus> GetDoorStatusAsync(string userName, string password, System.Guid doorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetAlarmsToClear", ReplyAction="http://tempuri.org/IWebService/GetAlarmsToClearResponse")]
        DemoApplicationService.ClearAlarmCommand[] GetAlarmsToClear(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetAlarmsToClear", ReplyAction="http://tempuri.org/IWebService/GetAlarmsToClearResponse")]
        System.Threading.Tasks.Task<DemoApplicationService.ClearAlarmCommand[]> GetAlarmsToClearAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/CloseAlarmOnDoor", ReplyAction="http://tempuri.org/IWebService/CloseAlarmOnDoorResponse")]
        void CloseAlarmOnDoor(string userName, string password, System.Guid doorId, System.Guid eventTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/CloseAlarmOnDoor", ReplyAction="http://tempuri.org/IWebService/CloseAlarmOnDoorResponse")]
        System.Threading.Tasks.Task CloseAlarmOnDoorAsync(string userName, string password, System.Guid doorId, System.Guid eventTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/UpdateDoorEnabledStates", ReplyAction="http://tempuri.org/IWebService/UpdateDoorEnabledStatesResponse")]
        void UpdateDoorEnabledStates(string userName, string password, System.Tuple<string, bool>[] changedStates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/UpdateDoorEnabledStates", ReplyAction="http://tempuri.org/IWebService/UpdateDoorEnabledStatesResponse")]
        System.Threading.Tasks.Task UpdateDoorEnabledStatesAsync(string userName, string password, System.Tuple<string, bool>[] changedStates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/UpdateEventTypeEnabledStates", ReplyAction="http://tempuri.org/IWebService/UpdateEventTypeEnabledStatesResponse")]
        void UpdateEventTypeEnabledStates(string userName, string password, System.Tuple<string, bool>[] changedStates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/UpdateEventTypeEnabledStates", ReplyAction="http://tempuri.org/IWebService/UpdateEventTypeEnabledStatesResponse")]
        System.Threading.Tasks.Task UpdateEventTypeEnabledStatesAsync(string userName, string password, System.Tuple<string, bool>[] changedStates);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebServiceChannel : DemoApplicationService.IWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<DemoApplicationService.IWebService>, DemoApplicationService.IWebService {
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DemoApplicationService.UserDescriptor Connect(string userName, string password) {
            return base.Channel.Connect(userName, password);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.UserDescriptor> ConnectAsync(string userName, string password) {
            return base.Channel.ConnectAsync(userName, password);
        }
        
        public DemoApplicationService.UserDescriptor GetUser(string userName) {
            return base.Channel.GetUser(userName);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.UserDescriptor> GetUserAsync(string userName) {
            return base.Channel.GetUserAsync(userName);
        }
        
        public DemoApplicationService.EventDescriptor[] GetEventTypes(string userName, string password) {
            return base.Channel.GetEventTypes(userName, password);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.EventDescriptor[]> GetEventTypesAsync(string userName, string password) {
            return base.Channel.GetEventTypesAsync(userName, password);
        }
        
        public DemoApplicationService.DoorControllerDescriptor[] GetDoorControllers(string userName, string password) {
            return base.Channel.GetDoorControllers(userName, password);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.DoorControllerDescriptor[]> GetDoorControllersAsync(string userName, string password) {
            return base.Channel.GetDoorControllersAsync(userName, password);
        }
        
        public DemoApplicationService.DoorDescriptor[] GetDoors(string userName, string password) {
            return base.Channel.GetDoors(userName, password);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.DoorDescriptor[]> GetDoorsAsync(string userName, string password) {
            return base.Channel.GetDoorsAsync(userName, password);
        }
        
        public DemoApplicationService.CredentialHolderDescriptor GetCredentialHolder(System.Guid credentialHolderId) {
            return base.Channel.GetCredentialHolder(credentialHolderId);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.CredentialHolderDescriptor> GetCredentialHolderAsync(System.Guid credentialHolderId) {
            return base.Channel.GetCredentialHolderAsync(credentialHolderId);
        }
        
        public DemoApplicationService.CredentialHolderDescriptor[] SearchCredentialHolders(string searchString) {
            return base.Channel.SearchCredentialHolders(searchString);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.CredentialHolderDescriptor[]> SearchCredentialHoldersAsync(string searchString) {
            return base.Channel.SearchCredentialHoldersAsync(searchString);
        }
        
        public DemoApplicationService.BaseEvent[] GetEvents(string userName, string password, int timeoutMilliSecs, long startSequenceNumber, int count) {
            return base.Channel.GetEvents(userName, password, timeoutMilliSecs, startSequenceNumber, count);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.BaseEvent[]> GetEventsAsync(string userName, string password, int timeoutMilliSecs, long startSequenceNumber, int count) {
            return base.Channel.GetEventsAsync(userName, password, timeoutMilliSecs, startSequenceNumber, count);
        }
        
        public bool UnlockDoor(string userName, string password, string vmsUserName, System.Guid doorId) {
            return base.Channel.UnlockDoor(userName, password, vmsUserName, doorId);
        }
        
        public System.Threading.Tasks.Task<bool> UnlockDoorAsync(string userName, string password, string vmsUserName, System.Guid doorId) {
            return base.Channel.UnlockDoorAsync(userName, password, vmsUserName, doorId);
        }
        
        public bool LockDoor(string userName, string password, string vmsUserName, System.Guid doorId) {
            return base.Channel.LockDoor(userName, password, vmsUserName, doorId);
        }
        
        public System.Threading.Tasks.Task<bool> LockDoorAsync(string userName, string password, string vmsUserName, System.Guid doorId) {
            return base.Channel.LockDoorAsync(userName, password, vmsUserName, doorId);
        }
        
        public DemoApplicationService.DoorStatus GetDoorStatus(string userName, string password, System.Guid doorId) {
            return base.Channel.GetDoorStatus(userName, password, doorId);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.DoorStatus> GetDoorStatusAsync(string userName, string password, System.Guid doorId) {
            return base.Channel.GetDoorStatusAsync(userName, password, doorId);
        }
        
        public DemoApplicationService.ClearAlarmCommand[] GetAlarmsToClear(string userName, string password) {
            return base.Channel.GetAlarmsToClear(userName, password);
        }
        
        public System.Threading.Tasks.Task<DemoApplicationService.ClearAlarmCommand[]> GetAlarmsToClearAsync(string userName, string password) {
            return base.Channel.GetAlarmsToClearAsync(userName, password);
        }
        
        public void CloseAlarmOnDoor(string userName, string password, System.Guid doorId, System.Guid eventTypeId) {
            base.Channel.CloseAlarmOnDoor(userName, password, doorId, eventTypeId);
        }
        
        public System.Threading.Tasks.Task CloseAlarmOnDoorAsync(string userName, string password, System.Guid doorId, System.Guid eventTypeId) {
            return base.Channel.CloseAlarmOnDoorAsync(userName, password, doorId, eventTypeId);
        }
        
        public void UpdateDoorEnabledStates(string userName, string password, System.Tuple<string, bool>[] changedStates) {
            base.Channel.UpdateDoorEnabledStates(userName, password, changedStates);
        }
        
        public System.Threading.Tasks.Task UpdateDoorEnabledStatesAsync(string userName, string password, System.Tuple<string, bool>[] changedStates) {
            return base.Channel.UpdateDoorEnabledStatesAsync(userName, password, changedStates);
        }
        
        public void UpdateEventTypeEnabledStates(string userName, string password, System.Tuple<string, bool>[] changedStates) {
            base.Channel.UpdateEventTypeEnabledStates(userName, password, changedStates);
        }
        
        public System.Threading.Tasks.Task UpdateEventTypeEnabledStatesAsync(string userName, string password, System.Tuple<string, bool>[] changedStates) {
            return base.Channel.UpdateEventTypeEnabledStatesAsync(userName, password, changedStates);
        }
    }
}
